export declare class TraceManager {
    web3: any;
    fork: string;
    isLoading: boolean;
    trace: any;
    traceCache: any;
    traceAnalyser: any;
    traceStepManager: any;
    tx: any;
    constructor(options: any);
    resolveTrace(tx: any): Promise<boolean>;
    getTrace(txHash: any): Promise<unknown>;
    init(): void;
    getCurrentFork(): string;
    inRange(step: any): boolean;
    isLoaded(): boolean;
    getLength(callback: any): void;
    accumulateStorageChanges(index: any, address: any, storageOrigin: any): any;
    getAddresses(): any;
    getCallDataAt(stepIndex: any): any[];
    buildCallPath(stepIndex: any): Promise<any[]>;
    getCallStackAt(stepIndex: any): any;
    getStackAt(stepIndex: any): any;
    getLastCallChangeSince(stepIndex: any): any;
    getCurrentCalledAddressAt(stepIndex: any): any;
    getContractCreationCode(token: any): any;
    getMemoryAt(stepIndex: any, format?: boolean): any;
    getCurrentPC(stepIndex: any): any;
    getAllStopIndexes(): any;
    getAllOutofGasIndexes(): any;
    getReturnValue(stepIndex: any): any;
    getCurrentStep(stepIndex: any): any;
    getMemExpand(stepIndex: any): any;
    getStepCost(stepIndex: any): any;
    getRemainingGas(stepIndex: any): any;
    getStepProperty(stepIndex: any, property: any): any;
    isCreationStep(stepIndex: any): boolean;
    findStepOverBack(currentStep: any): any;
    findStepOverForward(currentStep: any): any;
    findNextCall(currentStep: any): any;
    findStepOut(currentStep: any): any;
    checkRequestedStep(stepIndex: any): void;
    waterfall(calls: any, stepindex: any, cb: any): void;
}
