"use strict";
(self["webpackChunk"] = self["webpackChunk"] || []).push([["node_modules_raw-loader_dist_cjs_js_node_modules_ethersproject_hdnode_lib_index_d_ts"],{

/***/ 25960:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("import { ExternallyOwnedAccount } from \"@ethersproject/abstract-signer\";\nimport { BytesLike } from \"@ethersproject/bytes\";\nimport { Wordlist } from \"@ethersproject/wordlists\";\nexport declare const defaultPath = \"m/44'/60'/0'/0/0\";\nexport interface Mnemonic {\n    readonly phrase: string;\n    readonly path: string;\n    readonly locale: string;\n}\nexport declare class HDNode implements ExternallyOwnedAccount {\n    readonly privateKey: string;\n    readonly publicKey: string;\n    readonly fingerprint: string;\n    readonly parentFingerprint: string;\n    readonly address: string;\n    readonly mnemonic?: Mnemonic;\n    readonly path: string;\n    readonly chainCode: string;\n    readonly index: number;\n    readonly depth: number;\n    /**\n     *  This constructor should not be called directly.\n     *\n     *  Please use:\n     *   - fromMnemonic\n     *   - fromSeed\n     */\n    constructor(constructorGuard: any, privateKey: string, publicKey: string, parentFingerprint: string, chainCode: string, index: number, depth: number, mnemonicOrPath: Mnemonic | string);\n    get extendedKey(): string;\n    neuter(): HDNode;\n    private _derive;\n    derivePath(path: string): HDNode;\n    static _fromSeed(seed: BytesLike, mnemonic: Mnemonic): HDNode;\n    static fromMnemonic(mnemonic: string, password?: string, wordlist?: string | Wordlist): HDNode;\n    static fromSeed(seed: BytesLike): HDNode;\n    static fromExtendedKey(extendedKey: string): HDNode;\n}\nexport declare function mnemonicToSeed(mnemonic: string, password?: string): string;\nexport declare function mnemonicToEntropy(mnemonic: string, wordlist?: string | Wordlist): string;\nexport declare function entropyToMnemonic(entropy: BytesLike, wordlist?: string | Wordlist): string;\nexport declare function isValidMnemonic(mnemonic: string, wordlist?: Wordlist): boolean;\nexport declare function getAccountPath(index: number): string;\n//# sourceMappingURL=index.d.ts.map");

/***/ })

}]);
//# sourceMappingURL=node_modules_raw-loader_dist_cjs_js_node_modules_ethersproject_hdnode_lib_index_d_ts.0.52.0-dev.1720620484381.js.map