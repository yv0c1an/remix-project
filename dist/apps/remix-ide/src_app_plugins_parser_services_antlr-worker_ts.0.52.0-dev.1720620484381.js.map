{"version":3,"file":"src_app_plugins_parser_services_antlr-worker_ts.0.52.0-dev.1720620484381.js","mappings":";;;;;AAAA,IAAIA,MAAW;AACfC,IAAI,CAACC,SAAS,GAAG,UAACC,CAAe,EAAK;EACpC,IAAMC,IAAS,GAAGD,CAAC,CAACC,IAAI;EACxB,QAAQA,IAAI,CAACC,GAAG;IAChB,KAAK,MAAM;MACX;QACGJ,IAAI,CAASK,aAAa,CAACH,CAAC,CAACC,IAAI,CAACG,GAAG,CAAC;QACvC;QACAP,MAAM,GAAGQ,cAAqB;QAE9BP,IAAI,CAACQ,WAAW,CAAC;UACfJ,GAAG,EAAE;QACP,CAAC,CAAC;QACF;MACF;IAEA,KAAK,OAAO;MACV,IAAID,IAAI,CAACM,IAAI,IAAIV,MAAM,EAAE;QAEvB,IAAI;UACF,IAAIW,SAAS,GAAGC,WAAW,CAACC,GAAG,EAAE;UACjC,IAAMC,MAAM,GAAGd,MAAM,CAACe,UAAU,CAACX,IAAI,CAACM,IAAI,EAAE;YAAEM,GAAG,EAAE,IAAI;YAAEC,KAAK,EAAE,IAAI;YAAEC,QAAQ,EAAE;UAAK,CAAC,CAAC;UACvF,IAAMC,aAAa,GAAGP,WAAW,CAACC,GAAG,EAAE,GAAGF,SAAS;UACnDA,SAAS,GAAGC,WAAW,CAACC,GAAG,EAAE;UAC7B,IAAMO,GAAG,GAAGpB,MAAM,CAACqB,KAAK,CAACjB,IAAI,CAACM,IAAI,EAAE;YAAEM,GAAG,EAAE,IAAI;YAAEC,KAAK,EAAE,IAAI;YAAEC,QAAQ,EAAE;UAAK,CAAC,CAAC;UAC/E,IAAMI,OAAO,GAAGV,WAAW,CAACC,GAAG,EAAE;UAEjCZ,IAAI,CAACQ,WAAW,CAAC;YACfJ,GAAG,EAAE,QAAQ;YACbkB,SAAS,EAAEnB,IAAI,CAACmB,SAAS;YACzBH,GAAG,EAAHA,GAAG;YACHV,IAAI,EAAEN,IAAI,CAACM,IAAI;YACfc,IAAI,EAAEpB,IAAI,CAACoB,IAAI;YACfC,QAAQ,EAAEH,OAAO,GAAGX,SAAS;YAC7BQ,aAAa,EAAbA,aAAa;YACbL,MAAM,EAANA;UACF,CAAC,CAAC;QACJ,CAAC,CAAC,OAAOX,CAAC,EAAE;UACV;QACF;MAEF;MACA;EAAK;AAET,CAAC,C","sources":["webpack:///./src/app/plugins/parser/services/antlr-worker.ts"],"sourcesContent":["let parser: any\nself.onmessage = (e: MessageEvent) => {\n  const data: any = e.data\n  switch (data.cmd) {\n  case 'load':\n  {\n    (self as any).importScripts(e.data.url)\n    // @ts-ignore\n    parser = SolidityParser as any;\n\n    self.postMessage({\n      cmd: 'loaded',\n    })\n    break\n  }\n\n  case 'parse':\n    if (data.text && parser) {\n\n      try {\n        let startTime = performance.now()\n        const blocks = parser.parseBlock(data.text, { loc: true, range: true, tolerant: true })\n        const blockDuration = performance.now() - startTime\n        startTime = performance.now()\n        const ast = parser.parse(data.text, { loc: true, range: true, tolerant: true })\n        const endTime = performance.now()\n\n        self.postMessage({\n          cmd: 'parsed',\n          timestamp: data.timestamp,\n          ast,\n          text: data.text,\n          file: data.file,\n          duration: endTime - startTime,\n          blockDuration,\n          blocks\n        })\n      } catch (e) {\n        // do nothing\n      }\n\n    }\n    break\n  }\n}"],"names":["parser","self","onmessage","e","data","cmd","importScripts","url","SolidityParser","postMessage","text","startTime","performance","now","blocks","parseBlock","loc","range","tolerant","blockDuration","ast","parse","endTime","timestamp","file","duration"],"sourceRoot":""}